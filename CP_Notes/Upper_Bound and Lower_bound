                                                                    ~ UPPER BOUND and LOWER BOUND FUNCTIONS ~
                                                                    ------------------------------------------
The very basis of these functions is the Two Problems Closest from left and Closest from right which is the background implementation of these functions.( Binary Search Edu section ).

Bookish Def                                                                       My def(for understanding):- (difference is instead of pointer iterator is returned in the functions)
                                                                            |
Lower Bound of x :- it returns the iterator to the smallest element >=x.    | ~  it returns the R pointer of CLOSEST FROM RIGHT.(>=x)
Upper Bound of x :- it returns the iterator to the smallest element >x      | ~  it returns the R Pointer of CLOSEST FROM LEFT. (>x)       we could do it-- to shift to L from R if that is required.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


CONTAINER SORTED IN INCREASING ORDER                                   
Lower Bound of x :- it returns the iterator to the smallest element >=x.    | ~  it returns the R pointer of CLOSEST FROM RIGHT.(>=x)
Upper Bound of x :- it returns the iterator to the smallest element >x      | ~  it returns the R Pointer of CLOSEST FROM LEFT. (>x)       we could do it-- to shift to L from R if that is required.


CONTAINER SORTED IN DECREASING ORDER
Lower Bound of x :- it returns the iterator to the greatest element <=x.    | ~  it returns the L pointer of CLOSEST FROM LEFT. (<=x)      
Upper Bound of x :- it returns the iterator to the smallest element <x      | ~  it returns the L Pointer of CLOSEST FROM RIGHT. (<x)       we could do it++ to shift to R from L if that is required.  (as L and R are always Neighbours)                                                                    

So using the upperbound ans lowerbound functions we can always get L,R of both closest from right or closest from left either by doing it--(to get L pointers we we have R pointers (actuallly iterators))
or buy sorting the array in decreasing order.(to directly get the L pointers instead of the usual R pointers(actually iterators))


------------------------------------------------------------------------------------------------------------------------------------------------
Syntax of UpperBound and LowerBound

-INCREASING ORDER

auto it=lower_bound(a.begin(),a.end(),target);
auto it=upper_bound(a.begin(),a.end(),target);

-DECREASING ORDER

auto it=lower_bound(a.begin(),a.end(),target,greater<int>());
auto it=upper_bound(a.begin(),a.end(),target,greater<int>());  greater<int>() tells the functions that we are dealing with decreasingly sorted array . 

Functioning as defined above.
Visualisation from right
But indexing never changes it is from left starting with 0.



------------------------------------------------------------------------------------------------------------------------------------------------

FEW POINTS/TECHNIQUES

- l and r are always neighbours at the and so if there are multiple x in the array and a[l]<=x and a[r]>x then l points to the last x 
- similarly for a[l]<x and a[r]>=x and for multiple x , r would point to the first x 
- to get 0 based indexes from the iterator we can substract a.begin from the iterator 
  eg   int idx=it-a.begin();  if it->a[i] and this gives i 
- we almost treat iterators are indices , remember iterator arthematic which automatically handles the size of the each element , so for easy visualisation we can take element size as 1, so if it_l -> a[l] and it_r-> a[r] then , 
it_r-it_L+1 gives the no. of elements in the range [a[l],a[r]]

----------------------------------------------------------------------------------------------------------------------------------------------------
